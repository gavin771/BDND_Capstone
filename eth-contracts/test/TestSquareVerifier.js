// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
var SquareVerifier = artifacts.require('SquareVerifier');

contract('SquareVerifier', accounts => {

  const account_one = accounts[0];

  // from proof.json
  const valid_proof = {
    "proof":
      {
        "A":["0x1c40b3f119fc6b8fbe8256c7dcb91c42971f086231b2fa36aac374c03e680ab0", "0x19f41599f5c3fcc52e8b06747f64ed74f733abd281538223395f678ce3241cd1"],
        "A_p":["0x2c36de9b5b508f550831ed45d0e1e122fcece23f5b09ddd30e305b34a2f8fe7e", "0x18677b0be3a946bb3223e2bc62d1d17c2afbd5876eea810716b2374f54b87a20"],
        "B":
          [["0x1b0a1041e7019ccaad031755d3e5410f6eaa82932f42445b4bc42199948324d3", "0xd9d51a6d24acfc1b6e557d0e8dd14c40e5ecd11a0ea6fa95dae8d023c113c1c"], ["0x1070980fb259b13849ce1f6a808aa57b63440345b459eda172df2716f9c79a9", "0x16cf86b1a7b5c8b44f9315e02a785fff8150e5745d7a93610ce37027c5c87654"]],

        "B_p":["0x1739d8f4f4c01662841efabe86e3e102d08cfb3201de94ec39d79c072c3e461b", "0x1f1e45a65b2bb8a84acb0fea61e63ac99ba49d99dbfe6e7f3437435c25b9fe3a"],
        "C":["0x551d10f3c67816b193c2fd1f62cbf99d7540a10d99f55d92e0c62f5568e0c9", "0x2791ea22c68bef7a71a616ff1d556a562e39150399fee7194562138f3fb1f57"],
        "C_p":["0x21d6dbf88491d53b4dc66a5266bea1999e4653b090dc6558aca9b7855eec2b59", "0x21c3e025285a73c6afec02472747d8bf3cd2ded5ef5dd8b5ad359144d35f9953"],
        "H":["0x1744a8c4a4329bb5a348e654fbfb43cf6015894b5e29b3c8f3b1ae16bc867990", "0x24a2939fc62726247578f300ed6336f99fc928033b2e2e830e213eaf5b5c56d6"],
        "K":["0xd45d027532e0bcf84751143d31c9229f4cd50727974855a65e5e5383e6bcea5", "0x3fb7e48b870bdb90c2fcec9f2c00edabc2e87fd75809f07efb9ad3665f42aa8"]
      },
    "input":[9,1]};

  describe('verification with correct and incorrect proof', function () {
    beforeEach(async function () {
      this.contract = await SquareVerifier.new({from: account_one});
    });

    // Test verification with correct proof
    // - use the contents from proof.json generated from zokrates steps
    it('verification with correct proof', async function () {
      let result = await this.contract.verifyTx.call(valid_proof.proof.A, valid_proof.proof.A_p, valid_proof.proof.B, valid_proof.proof.B_p, valid_proof.proof.C, valid_proof.proof.C_p, valid_proof.proof.H, valid_proof.proof.K, valid_proof.input, {from: account_one});
      assert.equal(result, true, "verification should be valid (correct proof)");
    });

    // Test verification with incorrect proof
    it('verification with incorrect proof', async function () {
      let newA_p = ["0x275c94ed587c6b0d491d339174175be8febede25f198edd393b21f838dfac5b2", "0xae46de18a7bd87a52d54f97f0ff4d121c1debf09ef130edaad95ce382aa28a3"];

      let result = await this.contract.verifyTx.call(valid_proof.proof.A, newA_p, valid_proof.proof.B, valid_proof.proof.B_p, valid_proof.proof.C, valid_proof.proof.C_p, valid_proof.proof.H, valid_proof.proof.K, valid_proof.input, {from: account_one});
      assert.equal(result, false, "verification should be invalid (incorrect proof)");
    })
  });

});
