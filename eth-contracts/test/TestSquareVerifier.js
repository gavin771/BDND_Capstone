// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
var SquareVerifier = artifacts.require('SquareVerifier');
const valid_proof = require('./proof');

contract('SquareVerifier', accounts => {

  const account_one = accounts[0];

  describe('verification with correct and incorrect proof', function () {
    beforeEach(async function () {
      this.contract = await SquareVerifier.new({from: account_one});
    });

    // Test verification with correct proof
    // - use the contents from proof.json generated from zokrates steps
    it('verification with correct proof', async function () {
      let result = await this.contract.verifyTx.call(valid_proof.proof.A, valid_proof.proof.A_p, valid_proof.proof.B, valid_proof.proof.B_p, valid_proof.proof.C, valid_proof.proof.C_p, valid_proof.proof.H, valid_proof.proof.K, valid_proof.input, {from: account_one});
      assert.equal(result, true, "verification should be valid (correct proof)");
    });

    // Test verification with incorrect proof
    it('verification with incorrect proof', async function () {
      let newA_p = ["0x275c94ed587c6b0d491d339174175be8febede25f198edd393b21f838dfac5b2", "0xae46de18a7bd87a52d54f97f0ff4d121c1debf09ef130edaad95ce382aa28a3"];

      let result = await this.contract.verifyTx.call(valid_proof.proof.A, newA_p, valid_proof.proof.B, valid_proof.proof.B_p, valid_proof.proof.C, valid_proof.proof.C_p, valid_proof.proof.H, valid_proof.proof.K, valid_proof.input, {from: account_one});
      assert.equal(result, false, "verification should be invalid (incorrect proof)");
    })
  });

});
